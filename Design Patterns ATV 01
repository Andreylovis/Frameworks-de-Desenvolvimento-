enum Evento { REGISTRADO, SEPARADO, SAIU_ENTREGA, ENTREGUE, PERDIDO }

enum Estado {
    CRIADO(Map.of(Evento.REGISTRADO, REGISTRADO)),
    REGISTRADO(Map.of(Evento.SEPARADO, SEPARADO)),
    SEPARADO(Map.of(Evento.SAIU_ENTREGA, SAIU_ENTREGA)),
    SAIU_ENTREGA(Map.of(Evento.ENTREGUE, ENTREGUE)),
    ENTREGUE(Map.of()),
    PERDIDO(Map.of());

    private final Map<Evento, Estado> transicoes;
    Estado(Map<Evento, Estado> transicoes){ this.transicoes = transicoes; }

    Estado proximo(Evento e){ return transicoes.getOrDefault(e, this); }
}

class Pacote {
    Estado estado = Estado.CRIADO;
    void aplicar(Evento e) {
        estado = estado.proximo(e);
    }
}

enum Evento – Lista os acontecimentos que podem ocorrer: o pacote é registrado, separado, sai para entrega, é entregue ou perdido.

enum Estado – Cada estado (CRIADO, REGISTRADO, etc.) já guarda em um mapa de transições qual será o próximo estado permitido para cada evento.

Ex.: de CRIADO, se ocorrer REGISTRADO, vai para REGISTRADO.

O método proximo(Evento e) apenas consulta o mapa, sem if ou switch.

class Pacote – representa o pacote.

Começa em Estado.CRIADO.

O método aplicar(Evento e) atualiza o estado chamando estado.proximo(e).
